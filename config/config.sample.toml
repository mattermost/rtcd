[api]
# The address and port to which the HTTP (and WebSocket) API server will be listening on.
http.listen_address = ":8045"
# A boolean controlling whether the API should be served on a TLS secure connection.
http.tls.enable = false
# A path to the certificate file used to serve the HTTP API.
http.tls.cert_file = ""
# A path to the certificate key used to serve the HTTP API.
http.tls.cert_key = ""
# A boolean controlling whether clients are allowed to self register.
# If rtcd sits in the internal (private) network this can be safely
# turned on to avoid the extra complexity of setting up credentials.
security.allow_self_registration = false
# A boolean controlling whether a superuser client should be allowed.
# The admin client can be used to generate the aforementioned crendetials.
# Example:
#   curl -H 'Authorization: Basic $(echo -n ':admin_secret_key' | base64)' \
#   http://localhost:8045/register -d '{"clientID": "clientA", "authKey": "Ey4-H_BJA00_TVByPi8DozE12ekN3S7A"}'
security.enable_admin = false
# A key used to authenticate as the admin client.
security.admin_secret_key = ""
# The expiration, in minutes, of the cached auth session and their tokens.
security.session_cache.expiration_minutes = 1440

[rtc]
# The IP address used to listen for UDP packets and generate UDP candidates.
#
# If left empty it has the same effect as using the 0.0.0.0 catch-all address,
# causing the server to listen on all available network interfaces.
ice_address_udp = ""
# The UDP port used to route media (audio/screen/video tracks).
ice_port_udp = 8443
# The IP address used to listen for TCP connections and generate TCP candidates. This is used to generate
# TCP candidates which may be used by client in case UDP connectivity is not available.
#
# If left empty it has the same effect as using the 0.0.0.0 catch-all address,
# causing the server to listen on all available network interfaces.
ice_address_tcp = ""
# The TCP port used to route media (audio/screen/video tracks). This is used to
# generate TCP candidates.
ice_port_tcp = 8443
# Enables experimental IPv6 support. When this setting is true the RTC service
# will work in dual-stack mode, listening for IPv6 connections and generating
# candidates in addition to IPv4 ones.
enable_ipv6 = false
# An optional hostname used to override the default value. By default, the
# service will try to guess its own public IP through STUN (if configured).
#
# Depending on the network setup, it may be necessary to set an override.
# This is the host that gets advertised to clients and that will be used to connect them to calls.
#
# For more advanced usage this value can also be a comma separated list of
# NAT mappings in the form of "external IP / internal IP" pairs, e.g. "8.8.8.8/10.0.2.2,8.8.4.4/10.0.2.1".
ice_host_override = ""

# An optional port number to be used as an override for host candidates in
# place of the one used to listen on (ice_port_udp/ice_port_tcp).
# This can be useful in case there are additional network components (e.g. NLBs)
# in front of this service that may route the traffic through a different port.
#
# Note: this port will apply to both UDP and TCP host candidates.
#
# ice_host_port_override = 30443
#
# This setting supports an advanced syntax that can be used to provide a full mapping
# of local addresses and the port that should be used to override the generated host candidate.
#
# Example:
#
# ice_host_override      = "8.8.8.8"
# ice_host_port_override = "localIPA/8443,localIPB/8444,localIPC/8445"
#
# In the above example, if the rtcd process is running on an instance with localIPA it will override
# the port of the host candidate using the address 8.8.8.8 with 8443.
#
# A reason to set a full mapping, including addresses of other instances, is to make it possible to pass the same
# config to multiple pods in Kubernetes deployments. In that case, each pod should match against one
# local (node) IP and greatly simplify load balancing across multiple nodes.

# A list of ICE servers (STUN/TURN) to be used by the service. It supports
# advanced configurations.
# Example
# ice_servers = [{urls = ["stun:localhost:3478"], username = "test", credential= "test"},
# {urls = ["turn:localhost:3478"], username = "username", credential = "password"}]
ice_servers = []
# An optional static secret used to generate short-lived credentials for TURN servers.
turn.static_auth_secret = ""
# The expiration, in minutes, of the short-lived credentials generated for TURN servers.
turn.credentials_expiration_minutes = 1440

# udp_sockets_count controls the number of listening UDP sockets used for each local
# network address. A larger number can improve performance by reducing contention
# over a few file descriptors. At the same time, it will cause more file descriptors
# to be open. The default is a dynamic value that scales with the number of available CPUs with
# a constant multiplier of 100. E.g. On a 4 CPUs node, 400 sockets per local
# network address will be open.
# udp_sockets_count =

[store]
# A path to a directory the service will use to store persistent data such as registered client IDs and hashed credentials.
data_source = "/tmp/rtcd_db"

[logger]
# A boolean controlling whether to log to the console.
enable_console = true
# A boolean controlling whether to use the JSON format for logging to the console.
console_json = false
# The logging level for the console.
console_level = "INFO"
# A boolean controlling whether to log to a file.
enable_file = true
# A boolean controlling whether to use the JSON format for logging to file
file_json = true
# The logging level for the file.
file_level = "DEBUG"
# The path to the log file.
file_location = "rtcd.log"
# A boolean controlling whether to display colors when logging to the console.
enable_color = true
